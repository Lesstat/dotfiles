#+Title: Emacs Configuration
#+Author: Florian Barth


* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Florian Barth"
      user-mail-address "florianbatrh@gmx.de")
#+END_SRC

* Customization File
I want to have a place where pc-specifc custom settings can go. I also
define a path for packages I manipulate myself.
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
(add-to-list 'load-path "~/.emacs.d/custom_packages/")
#+END_SRC

* General
#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC
** Styling
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 0)
  ;;(if (display-graphic-p)
      (load-theme 'dichromacy)
  ;; (load-theme 'tsdh-light))
  (setq inhibit-startup-screen t)
#+END_SRC
*** Highlighting parentheses 
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :config
    (global-highlight-parentheses-mode t))
#+END_SRC
** Evil-mode
As much as I love Emacs I love having vim keybindings :)
I added keybindings to switch buffers with C-xl and C-xh because arrow
keys suck.
#+BEGIN_SRC emacs-lisp

  (use-package evil
     :ensure t
     :config 
     (evil-mode 1)
     (setq evil-insert-state-cursor '((bar . 3) "black"))
     (define-key global-map "\C-xl" 'evil-next-buffer)
     (define-key global-map "\C-xh" 'evil-prev-buffer)
     (use-package evil-anzu
       :ensure t
       )
      (use-package evil-annoying-arrows
       :ensure nil
       :config
       (setq evil-annoying-arrows-super-annoying-mode nil)
       )
      (use-package evil-surround
        :ensure t
        :config
        (global-evil-surround-mode 1)
        )
      (use-package powerline
        :ensure t
        :config
        (set-face-foreground 'powerline-active1 "white")
        (set-face-foreground 'powerline-active2 "white")
        (set-face-foreground 'powerline-inactive1 "white")
        (set-face-foreground 'powerline-inactive2 "white")
        (use-package powerline-evil
          :ensure t
          :config
          (powerline-evil-center-color-theme)
          (set-face-foreground 'powerline-evil-normal-face "black")
          )
        )
      (use-package evil-org
        :ensure t )
      (use-package nlinum-relative
        :ensure t
        :config
        (global-nlinum-relative-mode t)
        )
      )
#+END_SRC
I don't need Enter & Space as movement commands in motion state. But
some modes want to use them.
#+BEGIN_SRC emacs-lisp
  ;;Source: https://www.emacswiki.org/emacs/Evil
  (defun fb/move-key (keymap-from keymap-to key)
       "Moves key binding from one keymap to another, deleting from the old location. "
       (define-key keymap-to key (lookup-key keymap-from key))
       (define-key keymap-from key nil))
     (fb/move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
     (fb/move-key evil-motion-state-map evil-normal-state-map " ")
#+END_SRC 
*** evil-snipe
A more powerful way to move with evil mode. [[https://github.com/hlissner/evil-snipe][github]]
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :ensure t
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1)
    (setq
     evil-snipe-scope 'buffer
     evil-snipe-repeat-scope 'whole-buffer)
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode))

#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (helm-mode 1)
    (global-set-key (kbd "M-x")                          'undefined)
    (global-set-key (kbd "M-x")                          'helm-M-x)
    (global-set-key (kbd "M-y")                          'helm-show-kill-ring)
    (global-set-key (kbd "C-x C-f")                      'helm-for-files) 
    (global-set-key (kbd "C-x b")                        'helm-mini)
    (setq helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match    t)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
    (setq helm-split-window-in-side-p           t ;open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-file-name-history-use-recentf t
          helm-completion-mode-string           nil) ;don't show helm in mode-list
    (helm-autoresize-mode 1)
    )
#+END_SRC
*** helm-ag
Lightning fast code search. Needs the [[https://github.com/ggreer/the_silver_searcher][silver searcher]] installed.
#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :ensure t
    )
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-strict-mode t)
    (use-package evil-smartparens
      :ensure t
      :config
      (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
    )

#+END_SRC
** Elfeed
Elfeed is a cool Feedreader with which I'm playing right
now. Unfortunately it doesn't work so well with evil mode.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-use-curl t)
    (push 'elfeed-search-mode evil-emacs-state-modes)
    (push 'elfeed-show-mode evil-emacs-state-modes)
    (add-hook 'elfeed-update-hooks '(lambda (url) (elfeed-db-save)))
    )
#+END_SRC
** Backup-files
taken from [[https://www.emacswiki.org/emacs/BackupDirectory][emacswiki]] 
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC
** Useful stuff
*** Hyperbole
#+BEGIN_SRC emacs-lisp
  (use-package hyperbole
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (define-key org-mode-map "\C-c." 'org-time-stamp) t))
                               ;;Hyperbole stole this one
    )
#+END_SRC
*** imenu-list
#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :ensure t
    :config
    (global-set-key (kbd "C-M-o") #'imenu-list-minor-mode)
    (setq imenu-list-auto-resize t)
    (add-hook 'imenu-list-major-mode-hook 'evil-motion-state))
#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp

  (setq org-modules
        '(org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m org-drill))
   (load-library "org-habit") ;; For some reason putting it into org-modules does not load it.
  (use-package org-plus-contrib
    :ensure t )
 (setq org-file-apps
    '((auto-mode . emacs)
     ("\\.mm\\'" . default)
     ("\\.x?html?\\'" . default)
     ("\\.pdf\\'" . "evince %s")))

  (use-package org-ref
    :ensure t)

  (dolist (hook '(org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1)))
    (add-hook hook (lambda () (auto-fill-mode 1)))
    )

#+END_SRC

** *Org*anizing features
*** Todo Stuff
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "NEXT(n!)" "IN-PROGRESS(p!)" "|" "DONE(d@)")
          (sequence "WAITING(w@)" "REFILE(r)" "|" "CANCELLED(c)")))
  (setq
   org-global-properties  '(("EFFORT_ALL" . "00:25 00:50 01:15 01:40 00:10"))
   org-columns-default-format "%25ITEM %TODO %6EFFORT(Effort) %6CLOCKSUM(Clock) %TAGS")
  '(org-enforce-todo-dependencies t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)
                             (fb/org-someday-file :maxlevel . 3)))
  (setq org-capture-templates
        '(("t" "TODO" entry (file+headline org-default-notes-file "Tasks")
           "** REFILE  %^{heading}  
  :PROPERTIES:
  :CREATION_DOC: %a 
  :CREATION_DATE: %U
  :END:
  %?")
          ("r" "Reference" entry 
           (file+headline fb/org-references-file "Referenzen") ;; Variable is set in custom.el to differentiate between computers
           "%? %T %a %x")
          ("w" "Weekly Review" entry
           (file+datetree fb/org-diary-file)
           (file "~/.emacs.d/org-capture-template/weekly_review.org")
           :jump-to-captured t)
          ("d" "Diary entry" entry
           (file+datetree fb/org-diary-file)
           "* %?" :jump-to-captured t)))
#+END_SRC
I want know when i finished my Todos or reschedule something.
#+BEGIN_SRC emacs-lisp
  (setq org-log-done (quote time)
        org-log-reschedule 'note
        org-log-into-drawer t)
#+END_SRC
Identifying stuck projects is an important part of GTD. But I only
want top level :prj: tagged headings to be listed, so I exclude :prj:
from tag inheritance.
#+BEGIN_SRC emacs-lisp
  (setq org-stuck-projects
        '(
          "+prj"
          ( "NEXT" "IN-PROGRESS")
          ("maybe")
          ""
          )
        org-tags-exclude-from-inheritance '("prj") 
        )

#+END_SRC

**** Org-pomodoro
Pomodoro Timer for Org-mode. I added a little buffer reminding me that
a pomodoro is over when I need to mute my audio.
#+BEGIN_SRC emacs-lisp
  (defun fb/display-pomodoro-finished-buffer ()
      (let (
            (pomodoro-buffer (get-buffer-create "*pomodoro-message*"))
            (oldbuf (current-buffer))
            )
        (pop-to-buffer pomodoro-buffer) 
        (insert "Your pomodoro is finished. Now a break starts.")
        )
    )

  (use-package org-pomodoro
    :ensure t
    :config
    (add-hook 'org-pomodoro-finished-hook 'fb/display-pomodoro-finished-buffer)
    (setq org-pomodoro-keep-killed-pomodoro-time t
          org-pomodoro-format "%s")

    )
#+END_SRC
As I am already fiddling around with timers, I will automatically
change the State to in progress when a timer is activated.
#+BEGIN_SRC emacs-lisp
  (setq org-clock-in-hook
        '(lambda () (if (org-entry-is-todo-p) (org-todo  "IN-PROGRESS" ))))
#+END_SRC
*** Agenda Stuff
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 'day)
  (setq org-agenda-custom-commands
    (quote
     (("y" "My Files"
       ((agenda "" nil)
	(todo "REFILE" nil)
	(todo "IN-PROGRESS"
              ((org-agenda-skip-function
		'(org-agenda-skip-entry-if 'scheduled))))
	(todo "NEXT"
              ((org-agenda-skip-function
		'(org-agenda-skip-entry-if 'scheduled))))
	(todo "WAITING" nil))
       ((org-agenda-tag-filter-preset
		'("-drill")))
		nil)
      ("n" "Agenda and all TODO's"
       ((agenda "" nil)
	(alltodo "" nil))
       nil)
      ("c" "calfw calendar view" fb/cfw-org-my-agenda nil ((org-agenda-tag-filter-preset '("drill"))) nil)
       )))
#+END_SRC
Repeating Task should show only once.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-repeating-timestamp-show-all nil)
#+END_SRC

** In Buffer Styling
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
   :ensure t
   :init (add-hook 'org-mode-hook 'org-bullets-mode))
(add-hook 'org-mode-hook 'org-indent-mode )
#+END_SRC
** Global Org mode keybindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-cb" 'org-iswitchb)
#+END_SRC
** Org-Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (sh . t)
     (python . t)
     (R . t)
     (dot . t)
     ))
  (use-package ob-ipython
    :ensure t
    )
#+END_SRC

** Export-Setting

*** General
I don't want broken links to stop myself from exporting (especially as
it also stops org-caldav-sync)
#+begin_src emacs-lisp
  (setq org-export-with-broken-links t)
#+end_src

*** New Exporters
#+BEGIN_SRC emacs-lisp

  (use-package ox-ioslide
    :ensure t
    )
  (use-package ox-reveal
    :ensure t
    :config
    (if (f-exists?  "/home/flo/workspaces/js/reveal.js") 
    (setq org-reveal-root "/home/flo/workspaces/js/reveal.js"))
    )
#+END_SRC

*** Exporting Source code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Latex
I added "-shell-escape" so that Latex packages that use system comands
 (like minted for [[*Latex Listings][Listings]]) work
#+BEGIN_SRC emacs-lisp
 (setq org-latex-pdf-process
    '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f" 
      "bibtex %b" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f" 
      "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
**** Latex Listings
I want listings to look nice and colored. Pygmentize is neede for this
to work.
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted)
#+END_SRC
**** Latex Classes
#+BEGIN_SRC emacs-lisp

(add-to-list 'org-latex-classes
	     '("llncs"
	       "
\\documentclass[pdftex,english,oribibl]{llncs}

%% Spracheinstellungen laden
\\usepackage[english]{babel}

%% Schriftart in der Ausgabe/Eingabe
\\usepackage[T1]{fontenc}
\\usepackage{textcomp}
\\usepackage[utf8]{inputenc}

%% Zitate
\\usepackage[numbers]{natbib}
\\bibliographystyle{abbrvnat}
%\\bibliographystyle{dinat}
%\\bibliographystyle{plainnat}
%\\bibliographystyle{splncs}
%% Similar to option \"sectionbib\" but \\refname instead of \\bibname
\\makeatletter
\\renewcommand\\bibsection{\\section*{\\refname\\@mkboth{\\MakeUppercase{\\refname}}{\\MakeUppercase{\\refname}}}}
\\makeatother

%% Index
%\\usepackage{makeidx}
%\\makeindex

\\usepackage{minted}
%% PDF Einstellungen
% muss nach natbib geladen werden!
\\usepackage{nameref}
\\usepackage{varioref}
\\usepackage[pdfusetitle,pdftex,colorlinks]{hyperref}
\\hypersetup{pdfborder={0 0 0}}
\\hypersetup{bookmarksdepth=3}
\\hypersetup{bookmarksopen=true}
\\hypersetup{bookmarksopenlevel=1}
\\hypersetup{bookmarksnumbered=true}
\\usepackage{color}
\\hypersetup{colorlinks=false}

%\\usepackage[section]{tocbibind}

\\makeatletter
\\gdef\\@keywords{}
\\def\\keywords#1{\\gdef\\@keywords{#1}}
\\gdef\\@subtitle{}
\\def\\subtitle#1{\\gdef\\@subtitle{#1}}

%% modified from llncs
\\renewenvironment{abstract}{%
  \\list{}{\\advance\\topsep by0.35cm\\relax\\small%
          \\leftmargin=1cm%
          \\labelwidth=\\z@%
          \\listparindent=\\z@%
          \\itemindent\\listparindent%
          \\rightmargin\\leftmargin}%
          \\item[\\hskip\\labelsep\\bfseries\\abstractname]}{%
  \\if!\\@keywords!\\else{\\item[~]\\item[\\hskip\\labelsep\\bfseries\\keywordname]\\@keywords}\\fi%
  \\endlist}

\\AtBeginDocument{%
  \\if!\\@subtitle!\\else\\hypersetup{pdfsubject={\\@subtitle}}\\fi
  \\if!\\@keywords!\\else\\hypersetup{pdfkeywords={\\@keywords}}\\fi
}
\\makeatother

% llncs hyperref fix
\\makeatletter
\\providecommand*{\\toclevel@author}{0}
\\providecommand*{\\toclevel@title}{0}
\\makeatother

%% Grafiken
\\usepackage[pdftex]{graphicx}
\\DeclareGraphicsExtensions{.pdf,.jpg,.png}
\\usepackage{subfigure}

%% Mathe
\\usepackage{amsmath}
\\usepackage{amssymb}

%% Listings
\\usepackage{listings}
\\lstset{escapechar=\\%, frame=tb, basicstyle=\\footnotesize}

%% Sonstiges
\\newcommand{\\TODO}[1]{\\par\\textcolor{red}{#1}\\marginpar{\\textcolor{red}{TODO}}}
\\newcommand{\\TODOX}[1]{\\textcolor{red}{#1}\\marginpar{\\textcolor{red}{TODO}}}
\\pagestyle{plain}

% Keine \"Schusterjungen\"
\\clubpenalty = 10000
% Keine \"Hurenkinder\"
\\widowpenalty = 10000 \\displaywidowpenalty = 10000
      
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	     )

(add-to-list 'org-latex-classes
	     '("llncs_deutsch"
	       "
\\documentclass[pdftex,german,oribibl]{llncs}

%% Spracheinstellungen laden
\\usepackage[main=german]{babel}

%% Schriftart in der Ausgabe/Eingabe
\\usepackage[T1]{fontenc}
\\usepackage{textcomp}
\\usepackage[utf8]{inputenc}

%% Zitate
\\usepackage[numbers]{natbib}
\\bibliographystyle{abbrvnat}
%\\bibliographystyle{dinat}
%\\bibliographystyle{plainnat}
%\\bibliographystyle{splncs}
%% Similar to option \"sectionbib\" but \\refname instead of \\bibname
\\makeatletter
\\renewcommand\\bibsection{\\section*{\\refname\\@mkboth{\\MakeUppercase{\\refname}}{\\MakeUppercase{\\refname}}}}
\\makeatother

%% Index
%\\usepackage{makeidx}
%\\makeindex

\\usepackage{minted}
%% PDF Einstellungen
% muss nach natbib geladen werden!
\\usepackage{nameref}
\\usepackage{varioref}
\\usepackage[pdfusetitle,pdftex,colorlinks]{hyperref}
\\hypersetup{pdfborder={0 0 0}}
\\hypersetup{bookmarksdepth=3}
\\hypersetup{bookmarksopen=true}
\\hypersetup{bookmarksopenlevel=1}
\\hypersetup{bookmarksnumbered=true}
\\usepackage{color}
\\hypersetup{colorlinks=false}

%\\usepackage[section]{tocbibind}

\\makeatletter
\\gdef\\@keywords{}
\\def\\keywords#1{\\gdef\\@keywords{#1}}
\\gdef\\@subtitle{}
\\def\\subtitle#1{\\gdef\\@subtitle{#1}}

%% modified from llncs
\\renewenvironment{abstract}{%
  \\list{}{\\advance\\topsep by0.35cm\\relax\\small%
          \\leftmargin=1cm%
          \\labelwidth=\\z@%
          \\listparindent=\\z@%
          \\itemindent\\listparindent%
          \\rightmargin\\leftmargin}%
          \\item[\\hskip\\labelsep\\bfseries\\abstractname]}{%
  \\if!\\@keywords!\\else{\\item[~]\\item[\\hskip\\labelsep\\bfseries\\keywordname]\\@keywords}\\fi%
  \\endlist}

\\AtBeginDocument{%
  \\if!\\@subtitle!\\else\\hypersetup{pdfsubject={\\@subtitle}}\\fi
  \\if!\\@keywords!\\else\\hypersetup{pdfkeywords={\\@keywords}}\\fi
}
\\makeatother

% llncs hyperref fix
\\makeatletter
\\providecommand*{\\toclevel@author}{0}
\\providecommand*{\\toclevel@title}{0}
\\makeatother

%% Grafiken
\\usepackage[pdftex]{graphicx}
\\DeclareGraphicsExtensions{.pdf,.jpg,.png}
\\usepackage{subfigure}

%% Mathe
\\usepackage{amsmath}
\\usepackage{amssymb}

%% Listings
\\usepackage{listings}
\\lstset{escapechar=\\%, frame=tb, basicstyle=\\footnotesize}

%% Sonstiges
\\newcommand{\\TODO}[1]{\\par\\textcolor{red}{#1}\\marginpar{\\textcolor{red}{TODO}}}
\\newcommand{\\TODOX}[1]{\\textcolor{red}{#1}\\marginpar{\\textcolor{red}{TODO}}}
\\pagestyle{plain}

% Keine \"Schusterjungen\"
\\clubpenalty = 10000
% Keine \"Hurenkinder\"
\\widowpenalty = 10000 \\displaywidowpenalty = 10000
      
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	     )
#+END_SRC

*** Number formatting in Tables
I hacked together a little function which replaces the point by a
comma in decimal numbers on export if I need a German display style in
presentations / papers. Activation by uncommenting the add-hook call.
#+BEGIN_SRC emacs-lisp

(defun fb/org-use-comma-in-exported-tables (backend)
  (goto-char (point-min))
  (while (re-search-forward "\\([0-9]\\)\\.\\([0-9]\\)" nil t)
     (when (save-match-data (org-at-table-p))
       (replace-match "\\1,\\2" t nil))))

;;(add-hook 'org-export-before-pro-hook
;;          'fb/org-use-comma-in-exported-tables)
#+END_SRC
** Org-presie
Downloaded from https://github.com/nicferrier/org-presie
#+BEGIN_SRC emacs-lisp
    (autoload 'org-presie "org-presie" nil t)
    (use-package org-presie
      :ensure nil)
#+END_SRC
*** EIMP 
reuired by org-presie
#+BEGIN_SRC emacs-lisp
  (use-package eimp
    :ensure t)
#+END_SRC

** org-drill
Proudly stolen from [[http://www.giovannicarmantini.com/2015/07/putting-some-make-up-on-my-org-mode-flashcards][Giovanni]]
#+BEGIN_SRC emacs-lisp
  (require 'org-drill)
  (setq org-drill-left-cloze-delimiter "!|"
        org-drill-right-cloze-delimiter "|!"
        org-drill-sm5-initial-interval 2.0
        org-drill-add-random-noise-to-intervals-p t
        org-drill-scope 'agenda
        org-drill-learn-fraction 0.45)

  ;;(add-hook 'org-export-before-processing-hook 'gsc/drill-cloze-removal)

  ;; hide clozes in text ;;
  (defvar gsc/drill-groups-to-hide '(1 3 4) 
  "Group 1 and 4 are the left and right delimiters respectively,
  group 3 is the cloze hint.")

  (setplist 'gsc/inv-cloze '(invisible t))

  (defun gsc/hide-clozes-groups ()
    (save-excursion
      (goto-char (point-min))
      (let ((cloze-regexp (gsc/drill-compute-cloze-regexp)))
      (while (re-search-forward cloze-regexp nil t)
        (loop for group in gsc/drill-groups-to-hide do
              (overlay-put 
               (make-overlay (match-beginning group) (match-end group))
               'category 'gsc/inv-cloze))))))

  (defun gsc/show-clozes-all ()
    (save-excursion
      (goto-char (point-min)) 
      (while (re-search-forward (gsc/drill-compute-cloze-regexp) nil t)
        (remove-overlays 
         (match-beginning 1) (match-end 4) 'category 'gsc/inv-cloze))))

  (defun gsc/hide-show-clozes (arg)
  "If called with no argument, hides delimiters and hints for org-drill clozes.
  If called with the C-u universal ARG, it shows them."
  (interactive "p")
  (case arg
    (1 (gsc/hide-clozes-groups))
    (4 (gsc/show-clozes-all))))
  (define-key org-mode-map (kbd "C-c s") 'gsc/hide-show-clozes)
#+END_SRC
* Programming
** General
I don't want to mix tabs with spaces, so I'm going all spaces.
#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil
        tab-always-indent 'complete)

#+END_SRC
** Dumb-Jump
Dumb-Jump gives jump to definition functionality by searching instead
of creating tags beforehand.
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (dumb-jump-mode))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t )
#+END_SRC
** Company - Auto Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (use-package company-c-headers
      :ensure t)
    (use-package company-shell
      :ensure t)
    (use-package company-go
      :ensure t)
    (use-package company-jedi
      :ensure t)
    (use-package company-web
      :ensure t)
    (use-package company-php
      :ensure t)
    (add-hook 'after-init-hook 'global-company-mode)
    )
  (semantic-mode 1)
  (global-semantic-idle-completions-mode t)
#+END_SRC

** Flycheck & Flymake
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config 
    (global-flycheck-mode)) 
  (use-package flymake-cppcheck
    :ensure t)
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable)
    :config
    (if (file-exists-p "/usr/bin/ipython")
        (progn
          (elpy-use-ipython)
          ;; The following helps againts ipython strange characters freezing emacs
          (setq python-shell-interpreter "ipython3"
                python-shell-interpreter-args "--simple-prompt --pprint"))) 
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (use-package ein
      :ensure t)
    (use-package py-autopep8
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t
  )
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'before-save-hook 'gofmt-before-save)
    (use-package flymake-go
      :ensure t)
    )
#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :config
    (setq auto-mode-alist (cons '("\.lua$" . lua-mode) auto-mode-alist))
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
  )
#+END_SRC
** Javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . js2-mode))
    (use-package js2-refactor
      :ensure t
      :config
      (add-hook 'js2-mode-hook 'js2-refactor-mode))
    )
#+END_SRC
** Web-Mode
Mode for editing all sorts of web stuff in a single file.
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-auto-pairing t
          web-mode-enable-css-colorization t
          web-mode-enable-current-element-highlight t))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-mode-line nil)
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-on)))

#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Yasnippet
Yasnippet provides great support for templates. But it destroys
tab-completion in term, so I deactivated it for term. 
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1)
    (add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)) ))
#+END_SRC
* Spelling
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :config
    (add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))
    (setq flyspell-mode-line-string nil)
    )
#+END_SRC
** Change Dictionaries
I only use German and English dictionaries but I switch frequently so
I wrote a little shortcut for that. 
#+BEGIN_SRC emacs-lisp
  (defvar fb/active_dict "german")
  (defvar fb/next_dict "english")
  (defun fb/switch_dict ()
    (interactive)
    (ispell-change-dictionary fb/next_dict)
    (let ( (temp_dict fb/active_dict) )
      (setq fb/active_dict fb/next_dict)
      (setq fb/next_dict temp_dict)
      )
    )
  (define-key global-map "\C-cd" 'fb/switch_dict)
#+END_SRC
* Temp
** narrow to dwim
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  (global-set-key (kbd "C-c '"  ) 'narrow-or-widen-dwim)

  #+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (use-package counsel
      :ensure t)
    (use-package ivy-hydra
      :ensure t)
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers    t
          ivy-re-builders-alist      '(( t . ivy--regex-ignore-order))
          counsel-find-file-at-point t)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-s") 'swiper)

    )
#+END_SRC
** calfw
#+BEGIN_SRC emacs-lisp
    (use-package calfw
      :ensure t
      :config
      (require 'calfw-ical)
      (require 'calfw-org))

  (defun fb/cfw-org-my-agenda (&rest ARGS)
    "Open calfw-buffer without the org-drill items."
    (interactive)
    (let ((org-agenda-tag-filter-preset '("-drill")))
      (cfw:open-org-calendar)
      )
    (set (make-variable-buffer-local 'org-agenda-tag-filter-preset) '("-drill"))
    )

#+END_SRC
** notmuch
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure t
    :config
    (setq notmuch-saved-searches
     (quote
      ((:name "inbox" :query "tag:inbox" :key "i")
       (:name "unread" :query "tag:unread" :key "u")
       (:name "flagged" :query "tag:flagged" :key "f")
       (:name "sent" :query "tag:sent" :key "t")
       (:name "drafts" :query "tag:draft" :key "d")
       (:name "all mail" :query "*" :key "a")
       (:name "gmx" :query "tag:gmx")
       (:name "studi_mail" :query "tag:uni")
       (:name "todo" :query "tag:todo")
       (:name "reply" :query "tag:doReply")
       )))
    (setq notmuch-archive-tags '("-inbox" "-unread"))
    )
#+END_SRC
** org-caldav
#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :ensure t)

#+END_SRC
** Auctex
Auctex seems to be the greatest LaTeX package around. Setting
Tex-master to nil makes Auctex ask for the master file to compile if
the document consists of multiple files.
#+BEGIN_SRC emacs-lisp
  (load "auctex.el" nil t t)
  (setq-default TeX-master nil)
#+END_SRC
** Rust
Configuration for the rust programming language adapted from
http://emacsist.com/10425.  Note that a checkout of the rust src is
needed and the environment variable RUST_SRC_PATH must point to it for
racer to work.
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (use-package racer
      :ensure t
      :config
      (setq racer-cmd "/usr/bin/racer")
      (use-package company-racer
	:ensure t)
      )
      (use-package flycheck-rust
	:ensure t
	)
  

    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
    (add-hook 'rust-mode-hook
	    
	      '(lambda ()
		 ;; Enable racer
		 (racer-activate)
		 ;; Hook in racer with eldoc to provide documentation
		 (racer-turn-on-eldoc)
		 ;; Use flycheck-rust in rust-mode
		 (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
		 ;; Use company-racer in rust mode
		 (set (make-local-variable 'company-backends) '(company-racer))
		 ))
    )

#+END_SRC
