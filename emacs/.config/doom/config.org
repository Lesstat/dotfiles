#+Title: Emacs Configuration
#+Author: Florian Barth
#+Property: header-args :results silent

* General
#+BEGIN_SRC elisp
;;; -*- lexical-binding: t; -*-
(setq user-full-name "Florian Barth")
#+END_SRC
** Style
#+BEGIN_SRC elisp
(setq doom-font "FiraCode Nerd Font 10"
      doom-theme 'doom-one)
#+END_SRC
** Spelling Correction
I want to have spelling for English and German at the same time. But spell-fu (default in doom now), doesn't support this yet ...
#+BEGIN_SRC elisp
(after! flyspell
  (setq ispell-program-name "hunspell"
       ;; ispell-dictionary "en_US")
    ispell-dictionary "en_US,de_DE")
    ;; ispell-set-spellchecker-params has to be called
    ;; before ispell-hunspell-add-multi-dic will work
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US,de_DE")
    )
#+END_SRC
* Org-mode
Do not do the stupid thing for invisible region.
#+BEGIN_SRC elisp
(after! org
 (setq org-catch-invisible-edits 'smart))
#+END_SRC
** *Org*anizing features
*** Todo Stuff
#+BEGIN_SRC elisp
(defvar fb/brain-dir "~/brain"
  "Basis dir for my Org-mode agenda files and other stuff")
(setq org-directory (concat fb/brain-dir "/org"))

(after! org
  (setq org-archive-location (concat fb/brain-dir  "/archive/archive.org::datetree/* Finished" )))
#+END_SRC

I want know when i finished my Todos or reschedule something.
#+BEGIN_SRC elisp
(after! org (setq org-log-done (quote time)))
#+END_SRC
I use GTD-Style context tags.
#+BEGIN_SRC elisp
(after! org
  (setq org-tag-alist '(("@home" . ?h)
                        ("@office" . ?o)
                        ("@errand" . ?e)
                        ("@call" . ?a)
                        ("@work" . ?w))))
#+END_SRC
**** Custom GTD-Workflow stuff
The following section contains some workflow automation
functions. First of all a cleanup function. It puts actionable and
high priority items at the top and updates statistics cookies. The
`org-sort-all` function is from [[https://github.com/jwiegley/dot-emacs/blob/2ba00f8209920b7c260cacc0fe28660a29b6f824/dot-org.el#L436-L456][John Wiegleys Emacs conf]].
#+BEGIN_SRC elisp
(defun fb/org-gtd-cleanup-buffer ()
  "Sorts all headings by todo-state and priority and updates all
  satistic cookies."
  (interactive)
  (fb/org-sort-all)
  (org-update-statistics-cookies t)
  (org-shifttab 3))

(defun fb/org-sort-all ()
  "Sorts all headings by todo-state and priorty"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^\* " nil t)
      (goto-char (match-beginning 0))
      (condition-case err
          (progn
            (org-sort-entries t ?p)
            (org-sort-entries t ?o))
        (error nil))
      (forward-line))))
#+END_SRC

Processing an inbox item consists of assigning a tag, the correct
todo item, an optional priority and refiling it into its correct place.
#+BEGIN_SRC elisp
(defun fb/org-process-inbox-item ()
  "Go through necessary actions to ensure a todo is in a
  sufficient state for usage in my gtd system"
  (interactive)
  (org-todo)
  (unless (org-entry-is-todo-p)
    (error "No TODO keyword was assigned"))
  (org-set-tags-command)
  ;; (unless (fb/org-todo-heading-has-context-p)
  ;;   (error "Item does not have a context assigned"))
  (condition-case nil
      (org-priority)
    (error nil))
  (org-mark-ring-push)
  (let* ((file (concat org-directory "/todos.org"))
         (pos (save-excursion
                (find-file file)
                (point-min))))
    (org-refile nil nil (list "" file nil pos))
    (org-mark-ring-goto)))

(defun fb/org-todo-heading-has-context-p ()
  "Returns t if the heading at point has a tag starting with @
  aka context-tag."
  (-any-p
   (lambda (tag) (s-matches-p "@" tag))
   (org-get-tags)))
#+END_SRC
**** org-gtd
#+begin_src elisp
(use-package! org-gtd
  :custom
  ;; where org-gtd will put its files. This value is also the default one.
  (org-gtd-directory (concat fb/brain-dir "/gtd"))
  ;; package: https://github.com/Malabarba/org-agenda-property
  ;; this is so you can see who an item was delegated to in the agenda
  (org-agenda-property-list '("DELEGATED_TO"))
  ;; I think this makes the agenda easier to read
  (org-agenda-property-position 'next-line)
  ;; package: https://www.nongnu.org/org-edna-el/
  ;; org-edna is used to make sure that when a project task gets DONE,
  ;; the next TODO is automatically changed to NEXT.
  (org-edna-use-inheritance t)
  :config
  (org-edna-load)

  :init

  (map! :leader :prefix "d"
        ("c"  #'org-gtd-capture ;; add item to inbox
         "a"  #'org-agenda-list ;; see what's on your plate today
         "p"  #'org-gtd-process-inbox ;; process entire inbox
         "n"  #'org-gtd-show-all-next ;; see all NEXT items
         "s"  #'org-gtd-show-stuck-projects)) ;; see projects that don't have a NEXT item
  (map! "C-c c" 'org-gtd-clarify-finalize)) ;; the keybinding to hit when you're done editing an item in the processing phase

(after! org-gtd
  ;; :after org-gtd ;; because we need to add the org-gtd directory to the agenda files
  ;; use as-is if you don't have an existing org-agenda setup
  ;; otherwise push the directory to the existing list
  (setq org-agenda-files `(,org-gtd-directory ,(concat org-roam-directory "/proj"))
        org-agenda-custom-commands '(("g" "Scheduled today and all NEXT items" ((agenda "" ((org-agenda-span 1))) (todo "NEXT"))))
        org-agenda-start-day "today"))

(after! org-gtd
  ;; note that org-gtd has to be loaded before this
  :config
  ;; use as-is if you don't have an existing set of org-capture templates
  ;; otherwise add to existing setup
  ;; you can of course change the letters, too
  (setq org-capture-templates `(("i" "Inbox"
                                 entry (file ,(org-gtd--path org-gtd-inbox-file-basename))
                                 "* %?\n%U\n\n  %i"
                                 :kill-buffer t)
                                ("l" "Todo with link"
                                 entry (file ,(org-gtd--path org-gtd-inbox-file-basename))
                                 "* %?\n%U\n\n  %i\n  %a"
                                 :kill-buffer t))))
#+end_src
**** org agenda
#+begin_src elisp
(setq org-agenda-show-future-repeats nil)
#+end_src
** Knowledge Base stuff
*** Deft
Deft enables me to quickly filter through all my nodes in org mode files.
#+BEGIN_SRC elisp
    (setq deft-extensions '("org" "md")
          deft-directory (concat fb/brain-dir "/notes")
          deft-use-filter-string-for-filename t
          deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)
            )
          deft-default-extension "org")
#+END_SRC

*** Org-roam
Org-roam is a tool to make my notes an interconnected web, that is awesome to navigate.
My configuration is inspired by system-crafters series on org roam (e.g. [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/][this]]).
#+BEGIN_SRC elisp
(after! org-roam
  (setq org-roam-directory deft-directory
        org-roam-dailies-directory "day/"
        org-roam-capture-templates
        `(
          ("d" "default" plain
           "* %?"
           :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U")
           :unnarrowed t)
          ("p" "project" plain
           (file ,(concat org-roam-directory "/tmpls/project.org"))
           :if-new (file+head "proj/${slug}.org" "#+title: ${title}")
           :unnarrowed t)))

  (defun fb/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun fb/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun fb/org-roam-find-nodes-by-tag ()
    (interactive)

    (let ((tag (ivy-read "Tag: " (org-roam-tag-completions))))
      (org-roam-node-find
       nil
       nil
       (fb/org-roam-filter-by-tag tag))))
  )
#+END_SRC

*** Org-ref
[[https://github.com/jkitchin/org-ref/][Org-ref]] is a fantastic reference management package from John Kitchin.

#+BEGIN_SRC elisp
(use-package! org-ref
  :init
  (setq org-ref-pdf-directory "~/brain/files/references/pdfs/"
        org-ref-bibliography-notes "~/brain/files/references/notes.org"
        org-ref-default-bibliography '("~/brain/files/references/references.bib")
        reftex-default-bibliography org-ref-default-bibliography))
(after! org
  (setcdr (assoc "\\.pdf\\'" org-file-apps) 'emacs))
#+END_SRC
** Exporting
When exporting source code blocks they should be syntax highlighted (even in pdfs).
#+BEGIN_SRC elisp
(after! org
  (setq org-latex-listings 'minted
        org-latex-pdf-process '("latexmk -shell-escape -interaction=nonstopmode -pdf %f"))
  (add-to-list 'org-latex-packages-alist '("newfloat" "minted")))
#+END_SRC

* Programming

** Projectile
I configured projectile to go straight to the magit view, when I open a project, so I get an
overview of the situation. The following code block sets the default action to
be the 13th in the list of actions. Obviously, this will have to be kept in sync
with the doom config and only works with the ivy interface to projectile.
#+BEGIN_SRC elisp
(after! counsel-projectile
  (setcar counsel-projectile-switch-project-action 14))
#+END_SRC
** Flycheck
For now, just keybindings for going to the next and previous error.
#+BEGIN_SRC elisp
(map! :leader :prefix "c" ("n" #'flycheck-next-error
                           "p" #'flycheck-previous-error))
#+END_SRC

** Folding
To get an overview of a source file I like to fold all functions. It
allows me to see the interface of classes/structs without too much
clutter. This currently depends on evil mode for folding which might
not be the best possible solution for this.
#+BEGIN_SRC elisp
  (defun fb/fold-functions (function-start function-paren)
  "Folds all functions in buffer that contain FUNCTION-START and
  their body begins with FUNCTION-PAREN."
    (let ((start-point (point)))
      (goto-char (point-min))
      (while (search-forward function-start nil t)
        (search-forward function-paren)
        (evil-close-fold))
      (goto-char start-point)))

  (defun fb/fold-rust-functions ()
  "Folds all functions in a rust buffer."
    (interactive)
    (fb/fold-functions "fn" "{"))

  (defun fb/fold-python-functions ()
  "Folds all functions in a rust buffer."
    (interactive)
    (fb/fold-functions "def" ":"))
#+END_SRC

** Rust
I like to use rust-analyzer for best performance lsp experience.
#+BEGIN_SRC elisp
(after! rustic
  (setq
   lsp-rust-server 'rust-analyzer
   rustic-lsp-server 'rust-analyzer
   lsp-rust-analyzer-server-display-inlay-hints t
   lsp-rust-analyzer-cargo-watch-command "clippy"
   lsp-rust-analyzer-cargo-all-targets t))
#+END_SRC

** LSP - Bread Crumbs
The breadcrumbs mode of lsp-mode gives me a better sense of where I am at in the code.
#+begin_src elisp
(setq lsp-headerline-breadcrumb-enable t)
#+end_src

* PDFs
I want to annotate via local leader instead of the clunky default.
#+BEGIN_SRC elisp
(defun fb/add-comma-annotation ()
  (interactive)
  (pdf-annot-add-highlight-markup-annotation
   (pdf-view-active-region t)
   "yellow"
   '((contents . "comma"))))

(map! :map pdf-view-mode-map
      :localleader
      :prefix ("a" . "Annotations")
      ( :n "h" #'pdf-annot-add-highlight-markup-annotation
        :n "t" #'pdf-annot-add-text-annotation
        :n "," #'fb/add-comma-annotation))
#+END_SRC
* Mail - mu4e
I set up general stuff for mu4e here but keep machine specific stuff in an extra
file mail.el.
#+BEGIN_SRC elisp
(defun fb/update-polybar-indicator ()
    "Update my custom polybar indicator which shows that mails need to be processed."
    (interactive)
    (start-process "update polybar indicator"
                   nil
                   "/usr/bin/polybar-msg"
                   "hook" "mail" "1"))
(after! mu4e
  (setq mu4e-view-html-plaintext-ratio-heuristic 100
        mu4e-attachment-dir "~/Downloads/"
        mu4e-get-mail-command "mbsync -c ~/.config/isync/mbsyncrc -a")
  (load-file (concat doom-private-dir  "mail.el"))
  (if (file-exists-p "/usr/bin/polybar-msg")
      (add-hook 'mu4e-index-updated-hook #'fb/update-polybar-indicator)))
#+END_SRC

Configuring sending mail.
#+BEGIN_SRC elisp
(after! mu4e
  (setq mail-specify-envelope-from t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-sendmail-envelope-from "header"
        sendmail-program "/usr/bin/msmtp"
        message-sendmail-f-is-evil t
        message-send-mail-function #'message-send-mail-with-sendmail
        mml-secure-openpgp-encrypt-to-self t
        mml-secure-openpgp-sign-with-sender t
        org-msg-default-alternatives '(html text)
        mu4e-compose-crypto-policy '(sign-all-messages encrypt-encrypted-replies)
        mu4e-compose-context-policy 'ask)
  
  (remove-hook 'mu4e-compose-pre-hook #'org-msg-mode))
#+END_SRC
** Bookmarks
Some bookmarks for easy access.
#+BEGIN_SRC elisp
  (after! mu4e
    (setq mu4e-bookmarks
          `(
            ,(make-mu4e-bookmark
              :name "Unread messages"
              :query "flag:unread AND NOT flag:trashed"
              :key ?u)
            ,(make-mu4e-bookmark
              :name "Inboxes"
              :query "maildir:/.*Inbox/"
              :key ?i)
            ,(make-mu4e-bookmark
              :name "Todos"
              :query "maildir:/.*Todo/"
              :key ?t)
            ,(make-mu4e-bookmark
              :name "Todays messages"
              :query "date:today..now"
              :key ?T))) )
#+END_SRC
* GPG-Encryption
#+begin_src elisp
(setq epg-gpg-home-directory (getenv "GNUPGHOME"))
#+end_src
