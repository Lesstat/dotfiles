#+Title: Emacs Configuration
#+Author: Florian Barth

* Auto-Compile
Auto-Compile makes sure that I don't get errors from freshly updated
(but not recompiled) packages.
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :ensure t
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode)
    )
#+END_SRC
* Customization File
I want to have a place where pc-specifc custom settings can go. I also
define a path for packages I manipulate myself.
#+BEGIN_SRC emacs-lisp
  (defcustom fb/brain-dir "~/brain"
    "Basis dir for my Org-mode agenda files and other stuff")
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
  (add-to-list 'load-path "~/.emacs.d/custom_packages/")
#+END_SRC

* General
#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC
** Styling
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 0)
  (setq inhibit-startup-screen t)
  (tool-bar-mode 0)
  (setq default-frame-alist '((font . "Fira Code-10")))
#+END_SRC
*** Highlighting parentheses 
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :config
    (global-highlight-parentheses-mode t))
#+END_SRC
*** Toggling Themes
#+BEGIN_SRC emacs-lisp 
(use-package heaven-and-hell
  :ensure t
  :init
  (setq heaven-and-hell-themes
        '((light . spacemacs-light)
          (dark . spacemacs-dark))) 
  :hook (after-init . heaven-and-hell-init-hook)
  :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
         ("<f6>" . heaven-and-hell-toggle-theme)))
#+END_SRC
** Evil-mode
As much as I love Emacs I love having vim keybindings :)
I added keybindings to switch buffers with C-xl and C-xh because arrow
keys suck.

As I was on the edge of RSI, I started using evil-leader to avoid
having to press Ctrl and Meta all the time. "<f5>" is used as
alternative leader key for modes where evil is not active.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (setq evil-insert-state-cursor '((bar . 3)))
    (define-key global-map (kbd "<f8>") 'evil-normal-state)
    (use-package evil-anzu
      :ensure t
      )
    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode 1)
      )

    (use-package powerline
      :ensure t
      :config
      (use-package powerline-evil
        :ensure t
        :config

        (defun fb/powerline-evil-center-color-theme-no-minor-modes ()
          "Powerline's center-evil theme with the evil state in color but without minor modes."
          (interactive)
          (setq-default mode-line-format
                        '("%e"
                          (:eval
                           (let* ((active (powerline-selected-window-active))
                                  (mode-line (if active 'mode-line 'mode-line-inactive))
                                  (face1 (if active 'powerline-active1 'powerline-inactive1))
                                  (face2 (if active 'powerline-active2 'powerline-inactive2))
                                  (separator-left (intern (format "powerline-%s-%s"
                                                                  (powerline-current-separator)
                                                                  (car powerline-default-separator-dir))))
                                  (separator-right (intern (format "powerline-%s-%s"
                                                                   (powerline-current-separator)
                                                                   (cdr powerline-default-separator-dir))))
                                  (lhs (list (powerline-raw "%*" nil 'l)
                                             (powerline-buffer-size nil 'l)
                                             (powerline-buffer-id nil 'l)
                                             (powerline-raw " ")
                                             (funcall separator-left mode-line face1)
                                             (powerline-narrow face1 'l)
                                             (powerline-vc face1)))
                                  (rhs (list (powerline-raw global-mode-string face1 'r)
                                             (powerline-raw "%4l" face1 'r)
                                             (powerline-raw ":" face1)
                                             (powerline-raw "%3c" face1 'r)
                                             (funcall separator-right face1 mode-line)
                                             (powerline-raw " ")
                                             (powerline-raw "%6p" nil 'r)
                                             (powerline-hud face2 face1)))
                                  (center (append (list (powerline-raw " " face1)
                                                        (funcall separator-left face1 face2)
                                                        (when (boundp 'erc-modified-channels-object)
                                                          (powerline-raw erc-modified-channels-object face2 'l))
                                                        (powerline-major-mode face2 'l)
                                                        (powerline-process face2)
                                                        (powerline-raw " " face2))
                                                  (let ((evil-face (powerline-evil-face)))
                                                    (if (split-string (format-mode-line minor-mode-alist))
                                                        (append (if evil-mode
                                                                    (list (funcall separator-right face2 evil-face)
                                                                          (powerline-raw (powerline-evil-tag) evil-face 'l)
                                                                          (powerline-raw " " evil-face)
                                                                          (funcall separator-left evil-face face2)))
                                                                (list ;(powerline-minor-modes face2 'l)
                                                                 (powerline-raw " " face2)
                                                                 (funcall separator-right face2 face1)))
                                                      (list (powerline-raw (powerline-evil-tag) evil-face)
                                                            (funcall separator-right evil-face face1)))))))
                             (concat (powerline-render lhs)
                                     (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                                     (powerline-render center)
                                     (powerline-fill face1 (powerline-width rhs))
                                     (powerline-render rhs)))))))

        (fb/powerline-evil-center-color-theme-no-minor-modes)
        )
      )

    (use-package evil-org
      :ensure t
      :after org
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (evil-org-set-key-theme))))

    (use-package evil-leader
      :ensure t
      :config
      (global-evil-leader-mode)
      (evil-leader/set-leader "SPC")
      (evil-leader/set-key
        "r" 'counsel-M-x
        "o s" 'org-caldav-sync
        "o a" 'org-agenda
        "o c" 'org-capture
        "n" 'narrow-or-widen-dwim
        "s" 'swiper
        "w n" 'ace-window
        "w h" 'split-window-horizontally
        "w v" 'split-window-vertically
        "w k" 'delete-window
        "w u" 'delete-other-windows
        "w s" 'ivy-push-view
        "w d" 'ivy-pop-view
        "b" 'ivy-switch-buffer
        "e" 'save-buffer
        "p" 'projectile-command-map
        "k" 'kill-this-buffer
        "h" help-map
        "f" 'find-file-without-purpose
        "l" 'counsel-locate
        "ä" 'fb/switch_dict
        "q q" 'save-buffers-kill-emacs
        "i" 'ivy-resume
        "c" 'flycheck-list-errors)
        (evil-leader/set-key-for-mode 'org-mode
          "o" nil
          "o s" 'org-caldav-sync
          "o d" 'org-drill
          "o a" 'org-agenda
          "l" 'counsel-locate
          )
        (evil-leader/set-key-for-mode 'rust-mode
          "g" 'racer-find-definition
          "d" 'racer-describe)
        (evil-leader/set-key-for-mode 'go-mode
          "g" 'godef-jump
          "d" 'godoc-at-point)
        (evil-leader/set-key-for-mode 'c++-mode
          "g" 'rtags-find-symbol-at-point
          "ä" 'srefactor-refactor-at-point)
        (define-key global-map (kbd "<f5>") evil-leader--default-map)
        )

    (use-package nlinum-relative
      :ensure t
      :config
      (global-nlinum-relative-mode t)
      )
    (evil-mode 1)
    )
#+END_SRC
I don't need Enter & Space as movement commands in motion state. But
some modes want to use them.
#+BEGIN_SRC emacs-lisp
  ;;Source: https://www.emacswiki.org/emacs/Evil
  (defun fb/move-key (keymap-from keymap-to key)
       "Moves key binding from one keymap to another, deleting from the old location. "
       (define-key keymap-to key (lookup-key keymap-from key))
       (define-key keymap-from key nil))
     (fb/move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
     (fb/move-key evil-motion-state-map evil-normal-state-map " ")
#+END_SRC 
*** evil-snipe
A more powerful way to move with evil mode. [[https://github.com/hlissner/evil-snipe][github]]
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :ensure t
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1)
    (setq
     evil-snipe-scope 'buffer
     evil-snipe-repeat-scope 'whole-buffer)
    (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
    (evil-define-key '(normal motion) 'evil-snipe-local-mode-map
      "f" 'evil-snipe-s
      "F" 'evil-snipe-S
      "t" 'evil-snipe-x
      "T" 'evil-snipe-X
      )
    )

#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-strict-mode t)
    (sp-pair  "'" nil :unless '(fb/deactivate-for-lisp-and-rust))
    (sp-local-pair 'rust-mode "{" nil :post-handlers '(("    |\n" "RET")))
    (use-package evil-smartparens
      :ensure t
      :config
      (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
    )

  (defun fb/deactivate-for-lisp-and-rust  (id action context)
    (or (eq major-mode 'emacs-lisp-mode)
	(eq major-mode 'rust-mode)
	(eq major-mode 'org-mode))) 
#+END_SRC
** Backup-files
taken from [[https://www.emacswiki.org/emacs/BackupDirectory][emacswiki]] 
#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t
     auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))       ; use versioned backups
#+END_SRC
** imenu-list
#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :ensure t
    :config
    (global-set-key (kbd "C-M-o") #'imenu-list-minor-mode)
    (setq imenu-list-auto-resize t)
    (add-hook 'imenu-list-major-mode-hook 'evil-motion-state))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (use-package counsel
      :ensure t)
    (use-package ivy-hydra
      :ensure t)
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers    t
          ivy-re-builders-alist      '(( t . ivy--regex-ignore-order))
          counsel-find-file-at-point t)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-s") 'swiper)
    (global-set-key (kbd "C-x C-f") 'counsel-locate)

    )
#+END_SRC
** Which-Key
Which key displays the possible keys and the function they are bound
to in a key sequence. 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+END_SRC
** Email - Notmuch
I require org-notmuch for org-mode links to mails. Org-notmuch is
provided as org-contrib package.
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure t
    :config
    (require 'org-notmuch)
    (setq notmuch-saved-searches
          (quote
           ((:name "inbox" :query "tag:inbox" :key "i")
            (:name "unread" :query "tag:unread" :key "u")
            (:name "flagged" :query "tag:flagged" :key "f")
            (:name "sent" :query "tag:sent" :key "t")
            (:name "drafts" :query "tag:draft" :key "d")
            (:name "spam" :query "tag:spam AND tag:unread" :key "s")
            (:name "gmx" :query "tag:gmx")
            (:name "studi_mail" :query "tag:uni")
            (:name "todo" :query "tag:todo")
            (:name "reply" :query "tag:doReply")
            (:name "waiting" :query "tag:waiting")
            )))
    (setq notmuch-archive-tags '("-inbox" "-unread")
          message-kill-buffer-on-exit t
          notmuch-search-oldest-first nil
          mail-specify-envelope-from t
          message-sendmail-extra-arguments '("--read-envelope-from")
          message-sendmail-envelope-from "header"
          mail-envelope-from "header"
          sendmail-program "/usr/bin/msmtp"
          message-sendmail-f-is-evil t
          message-send-mail-function 'message-send-mail-with-sendmail
          mml-secure-openpgp-encrypt-to-self t
          )

    ;; # was bound to notmuch-show-print-message which lead to some paper wasting
    (define-key notmuch-show-mode-map "#" nil)
    (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
    )

#+END_SRC
** Ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    ;; set aw-keys to the home-row of the neo layout (minus pinkys)
    (setq aw-keys '(?i ?a ?e ?o ?s ?n ?r))
    )
#+END_SRC
** purpose
#+BEGIN_SRC emacs-lisp
  (use-package window-purpose
    :ensure t
    :config
    (setq pop-up-frames t)
    (purpose-mode)
    (purpose-x-magit-single-on)

    (add-to-list 'purpose-user-mode-purposes '(c++-mode . code))
    (add-to-list 'purpose-user-mode-purposes '(rust-mode . code))
    (add-to-list 'purpose-user-mode-purposes '(flycheck-error-list-mode . errors))
    (add-to-list 'purpose-user-mode-purposes '(compilation-mode . compilation))
    (add-to-list 'purpose-user-mode-purposes '(shell-mode . shell))
    (add-to-list 'purpose-user-name-purposes '("COMMIT_EDITMSG" . commit))
    (purpose-compile-user-configuration)


    (add-to-list 'purpose-special-action-sequences
                 '(compilation
                   purpose-display-reuse-window-buffer-other-frame
                   purpose-display-reuse-window-purpose-other-frame
                   purpose-display-reuse-window-buffer
                   purpose-display-reuse-window-purpose
                   purpose-display-maybe-pop-up-frame
                   ))
    (add-to-list 'purpose-special-action-sequences
                 '(errors
                   purpose-display-reuse-window-buffer-other-frame
                   purpose-display-reuse-window-purpose-other-frame
                   purpose-display-reuse-window-buffer
                   purpose-display-reuse-window-purpose
                   purpose-display-maybe-pop-up-frame
                   ))
    (add-to-list 'purpose-special-action-sequences
                '(code
                  purpose-display-same-window
                  ))

    (add-to-list 'purpose-special-action-sequences
                 '(commit
                   purpose-display-maybe-pop-up-frame))
    )
#+END_SRC
** narrow to dwim
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((org-src-edit-buffer-p) (org-edit-src-exit))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  (global-set-key (kbd "C-c '"  ) 'narrow-or-widen-dwim)

  #+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp

   (setq org-modules
         '(org-bbdb org-bibtex org-docview org-habit org-info org-mhe org-rmail org-w3m org-drill))
    (load-library "org-habit") ;; For some reason putting it into org-modules does not load it.
   (use-package org
     :ensure org-plus-contrib 
     :defer t)
  (setq org-file-apps
     '((auto-mode . emacs)
      ("\\.mm\\'" . default)
      ("\\.x?html?\\'" . default)
      ("\\.pdf\\'" . "zathura %s")))

   (use-package org-ref
     :ensure t)

   (dolist (hook '(org-mode-hook))
     (add-hook hook (lambda () (flyspell-mode 1)))
     (add-hook hook (lambda () (auto-fill-mode 1)))
     (add-hook 'org-mode-hook
               (lambda ()
                 (setq-local yas/trigger-key [tab])
                 (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand))
               ))

#+END_SRC

** *Org*anizing features
*** Todo Stuff
#+BEGIN_SRC emacs-lisp

  (setq org-agenda-files (cons (concat fb/brain-dir "/org") '()))
  (message "org-agenda-files: %s" org-agenda-files)
  (setq org-default-notes-file (concat (car org-agenda-files) "/inbox.org"))
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "|" "DONE(d@)")
          (sequence "WAITING(w@)"  "|" "CANCELLED(c)")))
  '(org-enforce-todo-dependencies t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
  (setq org-capture-templates
        '(("t" "Todo" entry (file org-default-notes-file)
           "* TODO %?
  :PROPERTIES:
  :CREATION_DOC: %a
  :CREATION_DATE: %U
  :END:
  ")
          ("n" "Note" entry (file org-default-notes-file)
           "* %?
  :PROPERTIES:
  :CREATION_DOC: %a
  :CREATION_DATE: %U
  :END:
  %x")
          )
        )

  (setq org-archive-location (concat fb/brain-dir  "/archive/archive.org::datetree/* Finished" ))
#+END_SRC
I want know when i finished my Todos or reschedule something.
#+BEGIN_SRC emacs-lisp
  (setq org-log-done (quote time)
        org-log-into-drawer t)
#+END_SRC

**** Org-pomodoro
Pomodoro Timer for Org-mode. I added a little buffer reminding me that
a pomodoro is over when I need to mute my audio. Additionally, a
little pop-up is displayed via ~notify-send~. 
#+BEGIN_SRC emacs-lisp
  (defun fb/display-pomodoro-finished-buffer ()
      (let (
            (pomodoro-buffer (get-buffer-create "*pomodoro-message*"))
            (oldbuf (current-buffer))
            )
        (pop-to-buffer pomodoro-buffer) 
        (insert "Your pomodoro is finished. Now a break starts.")
        )
        (shell-command "notify-send -t 30000 'Pomodoro is done'")
    )

  (use-package org-pomodoro
    :ensure t
    :config
    (add-hook 'org-pomodoro-finished-hook 'fb/display-pomodoro-finished-buffer)
    (setq org-pomodoro-keep-killed-pomodoro-time t
          org-pomodoro-format "%s")

    )
#+END_SRC
*** Agenda Stuff
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 'day)
#+END_SRC
Repeating Task should show only once.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-repeating-timestamp-show-all nil)
#+END_SRC

** In Buffer Styling
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook 'org-bullets-mode)
     )
  (add-hook 'org-mode-hook 'org-indent-mode )
#+END_SRC
** Global Org mode keybindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cl" 'org-store-link)
#+END_SRC
** Org-Babel
Load languages I use.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (shell . t)
     (python . t)
     ))
#+END_SRC
Deactivate annoying doccheck warnings in org source blocks.
#+BEGIN_SRC emacs-lisp 
  (defun disable-fylcheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)
#+END_SRC

** Export-Setting

*** General
I don't want broken links to stop myself from exporting (especially as
it also stops org-caldav-sync)
#+begin_src emacs-lisp
  (setq org-export-with-broken-links t)
#+end_src

Most of the time the exported files are temporary anyway. Therefore I
use this snippet I found [[https://stackoverflow.com/a/47850858][here]] to export to a temporary folder.
#+BEGIN_SRC emacs-lisp 
(defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
  (unless pub-dir
    (setq pub-dir "/tmp/exported-org-files")
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir)))
  (apply orig-fun extension subtreep pub-dir nil))
(advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)
#+END_SRC

*** Exporting Source code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Latex
I added "-shell-escape" so that Latex packages that use system comands
 (like minted for [[*Latex Listings][Listings]]) work
#+BEGIN_SRC emacs-lisp
 (setq org-latex-pdf-process
    '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f" 
      "bibtex %b" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f" 
      "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
**** Latex Listings
I want listings to look nice and colored. Pygmentize is neede for this
to work.
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted)
#+END_SRC
*** Number formatting in Tables
I hacked together a little function which replaces the point by a
comma in decimal numbers on export if I need a German display style in
presentations / papers. Activation by uncommenting the add-hook call.
#+BEGIN_SRC emacs-lisp

(defun fb/org-use-comma-in-exported-tables (backend)
  (goto-char (point-min))
  (while (re-search-forward "\\([0-9]\\)\\.\\([0-9]\\)" nil t)
     (when (save-match-data (org-at-table-p))
       (replace-match "\\1,\\2" t nil))))

;;(add-hook 'org-export-before-pro-hook
;;          'fb/org-use-comma-in-exported-tables)
#+END_SRC

** calfw
#+BEGIN_SRC emacs-lisp
    (use-package calfw
      :ensure t
      :config
      (use-package calfw-ical
        :ensure t)
      (use-package calfw-org
        :ensure t)
      (setq calendar-week-start-day 1)
      )

  (defun fb/cfw-org-my-agenda (&rest ARGS)
    "Open calfw-buffer without the org-drill items."
    (interactive)
    (let ((org-agenda-tag-filter-preset '("-drill")))
      (cfw:open-org-calendar)
      )
    (set (make-variable-buffer-local 'org-agenda-tag-filter-preset) '("-drill"))
    )

#+END_SRC
* Programming
** General
I don't want to mix tabs with spaces, so I'm going all spaces.
#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil
        tab-always-indent 'complete)

#+END_SRC
*** Editorconfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC
*** Dumb-Jump
Dumb-Jump gives jump to definition functionality by searching instead
of creating tags beforehand.
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (dumb-jump-mode))
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (define-key magit-status-mode-map (kbd "SPC") evil-leader--default-map)
    ;; Ensures that commit buffer opens in insert mode
    (add-hook 'with-editor-mode-hook 'evil-insert-state)
    )
#+END_SRC
*** Company - Auto Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-tooltip-align-annotations t)
    (setq company-async-timeout 5)
    (use-package company-c-headers
      :ensure t)
    (use-package company-shell
      :ensure t)
    (use-package company-go
      :ensure t)
    (use-package company-jedi
      :ensure t)
    (use-package company-web
      :ensure t)
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-mode-map  (kbd "M-<tab>") 'company-complete)
    (use-package company-quickhelp
      :ensure t
      :config
      (company-quickhelp-mode 1)
      (define-key company-active-map (kbd "M-h") #'company-quickhelp-manual-begin)
      )
    (use-package company-reftex
      :ensure t)
    (use-package company-math
      :ensure t
      :config
      (defun fb/company-latex-setup ()
        (setq-local company-backends
                    (append
                     '(
                       (company-math-symbols-latex
                        company-math-symbols-unicode
                        company-latex-commands
                        company-reftex-citations
                        company-reftex-labels))
                     company-backends)))

      (add-hook 'LaTeX-mode-hook  'fb/company-latex-setup)
      ;; In Org-mode I like to have the latex style for exporting.
      (add-hook 'org-mode-hook  'fb/company-latex-setup)
      )

    )
#+END_SRC

*** Flycheck 
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config 
    (global-flycheck-mode)
    (use-package flycheck-clang-tidy
      :ensure t
      :config
      (add-hook 'flycheck-mode-hook #'flycheck-clang-tidy-setup))
    (use-package flycheck-inline
      :ensure t
      :config
      (with-eval-after-load 'flycheck
        (add-hook 'flycheck-mode-hook #'flycheck-inline-mode)))
    ) 

#+END_SRC
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode)
    (setq projectile-mode-line nil)
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode)
      (setq projectile-switch-project-action 'projectile-vc)
      (setq counsel-projectile-switch-project-action
            '(12
             ("o" counsel-projectile-switch-project-action "jump to a project buffer or file")
             ("f" counsel-projectile-switch-project-action-find-file "jump to a project file")
             ("d" counsel-projectile-switch-project-action-find-dir "jump to a project directory")
             ("b" counsel-projectile-switch-project-action-switch-to-buffer "jump to a project buffer")
             ("m" counsel-projectile-switch-project-action-find-file-manually "find file manually from project root")
             ("S" counsel-projectile-switch-project-action-save-all-buffers "save all project buffers")
             ("k" counsel-projectile-switch-project-action-kill-buffers "kill all project buffers")
             ("K" counsel-projectile-switch-project-action-remove-known-project "remove project from known projects")
             ("c" counsel-projectile-switch-project-action-compile "run project compilation command")
             ("C" counsel-projectile-switch-project-action-configure "run project configure command")
             ("E" counsel-projectile-switch-project-action-edit-dir-locals "edit project dir-locals")
             ("v" counsel-projectile-switch-project-action-vc "open project in vc-dir / magit / monky")
             ("sg" counsel-projectile-switch-project-action-grep "search project with grep")
             ("ss" counsel-projectile-switch-project-action-ag "search project with ag")
             ("sr" counsel-projectile-switch-project-action-rg "search project with rg")
             ("xs" counsel-projectile-switch-project-action-run-shell "invoke shell from project root")
             ("xe" counsel-projectile-switch-project-action-run-eshell "invoke eshell from project root")
             ("xt" counsel-projectile-switch-project-action-run-term "invoke term from project root")
             ("O" counsel-projectile-switch-project-action-org-capture "org-capture into project")))
      ))

#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable)
    :config
    (if (file-exists-p "/usr/bin/ipython")
        (progn
          ;; The following helps againts ipython strange characters freezing emacs
          (setq python-shell-interpreter "ipython3"
                python-shell-interpreter-args "--simple-prompt --pprint"))) 
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (use-package ein
      :ensure t)
    (use-package py-autopep8
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
    (add-hook 'elpy-mode-hook 'hs-minor-mode)
    (setq flycheck-python-pycompile-executable "python3")
    )
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t
  )
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (setq gofmt-command "goimports")
    (add-hook 'go-mode-hook (lambda ()
                              (set (make-local-variable 'company-backends) '(company-go))
                              (company-mode)
                              (hs-minor-mode)
                              (setq tab-width 2)
                              (setq indent-tabs-mode nil)
                              (add-hook 'before-save-hook 'gofmt-before-save nil t)
                              ))
    (setq company-go-show-annotation t)
    )
#+END_SRC
** Javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . js2-mode))
    (use-package js2-refactor
      :ensure t
      :config
      (add-hook 'js2-mode-hook 'js2-refactor-mode))
    (add-hook 'js2-mode-hook 'hs-minor-mode)
    (use-package prettier-js
      :ensure t
      :config
      (add-hook 'js2-mode-hook 'prettier-js-mode))
    )
#+END_SRC
** Web-Mode
Mode for editing all sorts of web stuff in a single file.
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-auto-pairing t
          web-mode-enable-auto-closing t
          web-mode-auto-close-style 2
          web-mode-enable-css-colorization t
          web-mode-enable-current-element-highlight t))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Rust
Configuration for the rust programming language adapted from
http://emacsist.com/10425.  Note that a checkout of the rust src is
needed and the environment variable RUST_SRC_PATH must point to it for
racer to work.
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (use-package racer
      :ensure t
      :config
      (push 'racer-help-mode evil-emacs-state-modes)
      (use-package company-racer
        :ensure t)
      )
      (use-package flycheck-rust
        :ensure t
        )

    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
    (add-hook 'rust-mode-hook

              '(lambda ()
                 ;; Enable racer
                 (racer-activate)
                 ;; Hook in racer with eldoc to provide documentation
                 (racer-turn-on-eldoc)
                 ;; Use flycheck-rust in rust-mode
                 (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
                 (setq flycheck-checker 'rust-clippy)
                 ;; Use company-racer in rust mode
                 (set (make-local-variable 'company-backends) '(company-racer))
                 (rust-enable-format-on-save)
                 (flyspell-prog-mode)
                 (hs-minor-mode)
                 ))
    )

#+END_SRC
** Cpp
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure t
    :config
    (use-package company-rtags
      :ensure t
      :config
      (setq rtags-autostart-diagnostics t
            rtags-completions-enabled t
            rtags-display-result-backend 'ivy)
      )
    (use-package flycheck-rtags
      :ensure t
      :config
      (defun fb/flycheck-rtags-setup ()
        (flycheck-select-checker 'rtags)
        (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
        (setq-local flycheck-check-syntax-automatically nil))
      (add-hook 'c-mode-hook #'fb/flycheck-rtags-setup)
      (add-hook 'c++-mode-hook #'fb/flycheck-rtags-setup)
      (add-hook 'objc-mode-hook #'fb/flycheck-rtags-setup)
      )
    (use-package ivy-rtags
      :ensure t
      :config
      (setq rtags-display-result-backend 'ivy))

    (use-package cmake-mode
      :ensure t)
    (use-package cmake-ide
      :ensure t
      :config
      (cmake-ide-setup))
    (use-package clang-format
      :ensure t
      :config
      (add-hook 'c++-mode-hook '(lambda ()
                                  (add-hook 'before-save-hook 'clang-format-buffer nil t)
                                  (semantic-mode 0)
                                  )))
    (use-package srefactor
      :ensure t
      :config
      )
    (add-hook 'c++-mode-hook '(lambda () (hs-minor-mode 1)))
    )
#+END_SRC
** Compilation Mode
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
  (add-hook 'compilation-filter-hook
    (lambda () (ansi-color-apply-on-region (point-min) (point-max))))
#+END_SRC
** Latex - Auctex
Auctex seems to be the greatest LaTeX package around. Setting
Tex-master to nil makes Auctex ask for the master file to compile if
the document consists of multiple files.
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :defer t
    :ensure auctex
    :config
    (setq-default TeX-master nil)
    (defun fb/latexhook ()
      (TeX-fold-mode)
      (turn-on-reftex))
    (add-hook 'LaTeX-mode-hook 'fb/latexhook)
    (setq reftex-plug-into-AUCTeX t)
    (evil-leader/set-key-for-mode 'latex-mode
      "x" 'reftex-citation
      "v" 'reftex-label
      "V" 'reftex-reference)
    )
#+END_SRC
*** latexmk for auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex-latexmk
    :ensure t
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (add-to-list 'TeX-output-view-style
                 '("^pdf$" "." "okular %o %(outpage)"))
    )
#+END_SRC
* Yasnippet
Yasnippet provides great support for templates. But it destroys
tab-completion in term, so I deactivated it for term. 
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1)
    (add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)) )
    (use-package yasnippet-snippets
      :ensure t
      )
    )
#+END_SRC
* Spelling
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :config
    (setq flyspell-default-dictionary "english")
    (add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))
    (setq flyspell-mode-line-string nil)
    )
#+END_SRC
** Change Dictionaries
I only use German and English dictionaries but I switch frequently so
I wrote a little shortcut for that. 
#+BEGIN_SRC emacs-lisp
  (defvar fb/active_dict "english")
  (defvar fb/next_dict "german")
  (make-variable-buffer-local 'fb/active_dict)
  (make-variable-buffer-local 'fb/next_dict)
  (defun fb/switch_dict ()
    (interactive)
    (ispell-change-dictionary fb/next_dict)
    (let ( (temp_dict fb/active_dict) )
      (setq fb/active_dict fb/next_dict)
      (setq fb/next_dict temp_dict)
      )
    )
  (define-key global-map "\C-cd" 'fb/switch_dict)
#+END_SRC
* Temp
** jinja2
#+BEGIN_SRC emacs-lisp
  (use-package jinja2-mode
    :ensure t)
#+END_SRC
** deft
#+BEGIN_SRC emacs-lisp 
  (use-package deft
    :ensure t
    :config
    (setq deft-extensions '("org" "md")
          deft-directory "~/brain/notes"
          deft-use-filter-string-for-filename t
          deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)
            )
          deft-default-extension "org"
          )
  
    (push 'deft-mode evil-emacs-state-modes)
    )
#+END_SRC




